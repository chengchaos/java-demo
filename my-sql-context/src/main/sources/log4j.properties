### set log levels ###
## 参考: http://www.cnblogs.com/ITEagle/archive/2010/04/23/1718365.html
##

### 1: 配置根Logger
# log4j.rootLogger = [level], appenderName1, appenderName2 ,  …
#
### 2: 配置日志信息输出目的地Appender
# log4j.appender.appenderName  =  fully.qualified.name.of.appender.class
# log4j.appender.appenderName.option1  =  value1
# log4j.appender.appenderName.optionN  =  valueN

### 3: 配置日志信息的格式（布局）
# log4j.appender.appenderName.layout  =  fully.qualified.name.of.layout.class
# log4j.appender.appenderName.layout.option1  =  value1
# log4j.appender.appenderName.layout.optionN  =  valueN
#
### 其中 [level] 是日志输出级别，共有5级：
# FATAL  0
# ERROR  3
# WARN   4
# INFO   6
# DEBUG  7
#
### Appender 为日志输出目的地，Log4j提供的appender有以下几种：
# org.apache.log4j.ConsoleAppender（控制台），
# org.apache.log4j.FileAppender（文件），
# org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
# org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
# org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
#
###Layout：日志输出格式，Log4j提供的layout有以下几种：
# org.apache.log4j.HTMLLayout（以HTML表格形式布局），
# org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
# org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
# org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
#
### 打印参数: Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，如下:
#　　%m   输出代码中指定的消息
#　　%p   输出优先级，即 DEBUG，INFO，WARN，ERROR，FATAL
#　　%r   输出自应用启动到输出该log信息耗费的毫秒数
#　　%c   输出所属的类目，通常就是所在类的全名
#　　%t   输出产生该日志事件的线程名
#　　%n   输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
#　　%d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921
#　　%l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 )

### 可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。
# %20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
# %-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，"-"号指定左对齐。
# %.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
# %20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边较远输出的字符截掉。

### 1: 配置根Logger
log4j.rootLogger = DEBUG, stdout

### 2: 配置日志信息输出目的地Appender
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.Threshold = DEBUG

### 3: 配置日志信息的格式（布局）
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
#log4j.appender.stdout.layout.ConversionPattern = %d{ABSOLUTE} %5p %20.30c:%L - %m%n
log4j.appender.stdout.layout.ConversionPattern = %d{ABSOLUTE} %5p %c:%L - %m%n

log4j.logger.org.apache = WARN
log4j.logger.org.spark_project = WARN
log4j.logger.io.netty = WARN
log4j.logger.vip.chengchao = DEBUG


